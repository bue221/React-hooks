{"version":3,"sources":["context/ThemeContext.js","components/Header.jsx","components/Caracter.jsx","App.js","reportWebVitals.js","index.js"],"names":["ThemeContext","React","createContext","useStyles","makeStyles","black","color","btnBlack","border","Header","display","justifyContent","padding","alignItems","onClick","darkMode","classes","useContext","className","Button","variant","root","width","rootBlack","background","div","flexWrap","gap","area","flexDirection","img","maxWidth","favoritos","margin","height","overflowX","overflowY","item","initialState","favorites","favoriteReducer","state","action","type","payload","Caracteres","useReducer","dispatch","useState","personajes","setPersonajes","useEffect","getCharacters","a","fetch","response","json","data","results","map","personaje","index","Card","CardActionArea","src","image","alt","name","CardContent","Typography","gutterBottom","component","localation","species","gender","CardActions","size","status","style","textAlign","App","setDarkMode","Caracter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","Provider","value","document","getElementById"],"mappings":"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","file":"static/js/main.07b88799.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst ThemeContext = React.createContext(null);\r\n\r\nexport default ThemeContext;\r\n","import React, { useContext } from \"react\";\r\n//material ui\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\n//context\r\nimport ThemeContext from \"../context/ThemeContext\";\r\n\r\nconst useStyles = makeStyles({\r\n  black: {\r\n    color: \"white\",\r\n  },\r\n  btnBlack: {\r\n    color: \"white\",\r\n    border: \"1px solid white\",\r\n  },\r\n  Header: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-around\",\r\n    padding: \"2rem\",\r\n    alignItems: \"center\",\r\n  },\r\n});\r\n\r\nconst Header = ({ onClick, darkMode }) => {\r\n  const classes = useStyles();\r\n\r\n  const color = useContext(ThemeContext);\r\n\r\n  return (\r\n    <div className={classes.Header}>\r\n      <h1 className={darkMode && classes.black}>Curso de React hooks</h1>\r\n      <div>\r\n        <Button\r\n          variant=\"outlined\"\r\n          onClick={onClick}\r\n          className={darkMode && classes.btnBlack}\r\n        >\r\n          {darkMode ? \"brillante\" : \"oscuro\"}\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState, useEffect, useReducer } from \"react\";\r\n//material ui\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: 265,\r\n  },\r\n  rootBlack: {\r\n    width: 265,\r\n    background: \"#3c3e44\",\r\n    color: \"white\",\r\n  },\r\n  black: {\r\n    background: \"#3c3e44\",\r\n    color: \"white\",\r\n  },\r\n  div: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    gap: \"2rem\",\r\n  },\r\n  area: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  img: {\r\n    maxWidth: 250,\r\n  },\r\n  favoritos: {\r\n    margin: \"3rem\",\r\n    height: \"400px\",\r\n    border: \"1px solid #ddd\",\r\n    background: \"#f1f1f1\",\r\n    overflowX: \"scroll\",\r\n    overflowY: \"hidden\",\r\n  },\r\n  item: {\r\n    display: \"inline-flex\",\r\n    width: \"auto\",\r\n    gap: \"3rem\",\r\n  },\r\n});\r\n\r\nconst initialState = {\r\n  favorites: [],\r\n};\r\n\r\nconst favoriteReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"ADD_TO_FAVORITE\":\r\n      return {\r\n        ...state,\r\n        favorites: [...state.favorites, action.payload],\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst Caracteres = ({ darkMode }) => {\r\n  const classes = useStyles();\r\n\r\n  const [favorites, dispatch] = useReducer(favoriteReducer, initialState);\r\n  //console.log(favorites);\r\n  const [personajes, setPersonajes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getCharacters();\r\n  }, []);\r\n\r\n  const handleClick = (favorite) => {\r\n    dispatch({ type: \"ADD_TO_FAVORITE\", payload: favorite });\r\n  };\r\n\r\n  const getCharacters = async () => {\r\n    const response = await fetch(\"https://rickandmortyapi.com/api/character\");\r\n    const data = await response.json();\r\n    setPersonajes(data.results);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={classes.favoritos}>\r\n        <h1>Favoritos</h1>\r\n        <div className={classes.item}>\r\n          {favorites.favorites &&\r\n            favorites.favorites.map((personaje, index) => (\r\n              <Card\r\n                className={darkMode ? classes.rootBlack : classes.root}\r\n                key={index}\r\n              >\r\n                <CardActionArea className={classes.area}>\r\n                  <img\r\n                    src={personaje.image}\r\n                    alt={personaje.name}\r\n                    className={classes.img}\r\n                  />\r\n                  <CardContent>\r\n                    <Typography\r\n                      gutterBottom\r\n                      variant=\"h5\"\r\n                      component=\"h2\"\r\n                      className={darkMode && classes.black}\r\n                    >\r\n                      {personaje.name}\r\n                    </Typography>\r\n                    <Typography\r\n                      variant=\"body2\"\r\n                      color=\"textSecondary\"\r\n                      component=\"p\"\r\n                      className={darkMode && classes.black}\r\n                    >\r\n                      {personaje.localation} {personaje.species}{\" \"}\r\n                      {personaje.gender}\r\n                    </Typography>\r\n                  </CardContent>\r\n                </CardActionArea>\r\n                <CardActions>\r\n                  <Button size=\"small\" color=\"primary\">\r\n                    {personaje.status}\r\n                  </Button>\r\n                  <Button size=\"small\" color=\"primary\">\r\n                    eliminar\r\n                  </Button>\r\n                </CardActions>\r\n              </Card>\r\n            ))}\r\n        </div>\r\n      </div>\r\n      <h1 className={darkMode && classes.black} style={{ textAlign: \"center\" }}>\r\n        Personajes\r\n      </h1>\r\n      <div className={classes.div}>\r\n        {personajes.map((personaje, index) => (\r\n          <Card\r\n            className={darkMode ? classes.rootBlack : classes.root}\r\n            key={index}\r\n          >\r\n            <CardActionArea className={classes.area}>\r\n              <img\r\n                src={personaje.image}\r\n                alt={personaje.name}\r\n                className={classes.img}\r\n              />\r\n              <CardContent>\r\n                <Typography\r\n                  gutterBottom\r\n                  variant=\"h5\"\r\n                  component=\"h2\"\r\n                  className={darkMode && classes.black}\r\n                >\r\n                  {personaje.name}\r\n                </Typography>\r\n                <Typography\r\n                  variant=\"body2\"\r\n                  color=\"textSecondary\"\r\n                  component=\"p\"\r\n                  className={darkMode && classes.black}\r\n                >\r\n                  {personaje.localation} {personaje.species} {personaje.gender}\r\n                </Typography>\r\n              </CardContent>\r\n            </CardActionArea>\r\n            <CardActions>\r\n              <Button size=\"small\" color=\"primary\">\r\n                {personaje.status}\r\n              </Button>\r\n              <Button\r\n                size=\"small\"\r\n                color=\"primary\"\r\n                onClick={() => handleClick(personaje)}\r\n              >\r\n                Añadir a favoritos\r\n              </Button>\r\n            </CardActions>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Caracteres;\r\n","import React, { useState } from \"react\";\n\nimport \"./App.css\";\n\nimport Header from \"./components/Header\";\nimport Caracteres from \"./components/Caracter\";\n\nconst App = () => {\n  const [darkMode, setDarkMode] = useState(false);\n\n  const onClick = () => setDarkMode(!darkMode);\n\n  return (\n    <div className={darkMode && \"App\"}>\n      <Header darkMode={darkMode} onClick={onClick} />\n      <Caracteres darkMode={darkMode} />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport ThemeContext from \"./context/ThemeContext\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeContext.Provider value=\"red\">\n      <App />\n    </ThemeContext.Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}